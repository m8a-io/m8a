# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  createdBy: User!
  modifiedBy: User!

  """
  A generic datetime field used within an m8a data object. It is a timestamp of the date and time when the record was modified.
  """
  modifiedAt: DateTime!

  """
  A generic datetime field used within an m8a data object. It is a timestamp of the date and time when the record was created.
  """
  createdAt: DateTime!

  """The user's first name"""
  firstName: String!

  """The user's last name"""
  lastName: String!

  """
  The user's username. In the form of an email address. Can be the user's email address of a version thereof.
  """
  username: String!

  """The user's email address"""
  email: String!
  status: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type UserDeleteResponse {
  id: ID
  createdBy: User
  modifiedBy: User

  """
  A generic datetime field used within an m8a data object. It is a timestamp of the date and time when the record was modified.
  """
  modifiedAt: DateTime

  """
  A generic datetime field used within an m8a data object. It is a timestamp of the date and time when the record was created.
  """
  createdAt: DateTime

  """The user's first name"""
  firstName: String

  """The user's last name"""
  lastName: String

  """
  The user's username. In the form of an email address. Can be the user's email address of a version thereof.
  """
  username: String

  """The user's email address"""
  email: String
  status: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type UserConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [User!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserAggregateGroupBy {
  id: ID
  modifiedAt: DateTime
  createdAt: DateTime
  firstName: String
  lastName: String
  username: String
  email: String
  status: String
}

type UserCountAggregate {
  id: Int
  modifiedAt: Int
  createdAt: Int
  firstName: Int
  lastName: Int
  username: Int
  email: Int
  status: Int
}

type UserMinAggregate {
  id: ID
  modifiedAt: DateTime
  createdAt: DateTime
  firstName: String
  lastName: String
  username: String
  email: String
  status: String
}

type UserMaxAggregate {
  id: ID
  modifiedAt: DateTime
  createdAt: DateTime
  firstName: String
  lastName: String
  username: String
  email: String
  status: String
}

type UserAggregateResponse {
  groupBy: UserAggregateGroupBy
  count: UserCountAggregate
  min: UserMinAggregate
  max: UserMaxAggregate
}

type AccessTokenDTO {
  accessToken: String
  userId: String
}

type Query {
  userAggregate(
    """Filter to find records to aggregate on"""
    filter: UserAggregateFilter
  ): [UserAggregateResponse!]!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserConnection!
  findByIdCustom(id: String!): User!
  helloWorld: String!
  me: User!
}

input UserAggregateFilter {
  and: [UserAggregateFilter!]
  or: [UserAggregateFilter!]
  id: IDFilterComparison
  modifiedAt: DateFieldComparison
  createdAt: DateFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  username: StringFieldComparison
  email: StringFieldComparison
  status: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input UserFilter {
  and: [UserFilter!]
  or: [UserFilter!]
  id: IDFilterComparison
  modifiedAt: DateFieldComparison
  createdAt: DateFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  username: StringFieldComparison
  email: StringFieldComparison
  status: StringFieldComparison
}

input UserSort {
  field: UserSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserSortFields {
  id
  modifiedAt
  createdAt
  firstName
  lastName
  username
  email
  status
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Mutation {
  login(password: String!, username: String!): AccessTokenDTO

  """This is the mutation for registering a new user."""
  register(data: RegisterInputDTO!): User!
  logout: AccessTokenDTO
  createOneUser(input: CreateOneUserInput!): User!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
}

input RegisterInputDTO {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input CreateOneUserInput {
  """The record to create"""
  user: UserInput!
}

input UserInput {
  """The user's first name"""
  firstName: String!

  """The user's last name"""
  lastName: String!

  """
  The user's username. In the form of an email address. Can be the user's email address or a version thereof.
  """
  username: String!

  """The user's email address"""
  email: String!
  status: String!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [UserInput!]!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UserInput!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UserInput!
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  or: [UserUpdateFilter!]
  id: IDFilterComparison
  modifiedAt: DateFieldComparison
  createdAt: DateFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  username: StringFieldComparison
  email: StringFieldComparison
  status: StringFieldComparison
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  or: [UserDeleteFilter!]
  id: IDFilterComparison
  modifiedAt: DateFieldComparison
  createdAt: DateFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  username: StringFieldComparison
  email: StringFieldComparison
  status: StringFieldComparison
}
